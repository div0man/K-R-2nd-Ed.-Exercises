/* 
Exercise 
1-22. 
Write a 
program 
to "fold" 
long 
input 
lines 
into two 
or more
 * 
shorter 
lines 
after the 
last 
non-blank 
character 
that 
occurs 
before 
the n-th
 * column 
of input. 
Make sure 
your 
program 
does 
something 
intellige\
nt with 
very
 * long 
lines, 
and if 
there are 
no blanks 
or tabs 
before 
the 
specified 
column.
 */

#include 
<stdio.h>
#include 
<stdbool.\
h>

#define 
MAXTW	
16		
	// 
max. tab 
width
#define 
MAXFC	
100		
	// 
max. fold 
column, 
must be 
>=MAXTW
#define 
LINEBUF	
MAXFC+2	
	// 
line 
buffer 
size, 
must be 
>MAXFC+1

size_t 
getline(c\
har 
line[], 
size_t 
sz);
void 
copy(char 
* 
restrict 
to, char 
const * 
restrict 
from);
size_t 
foldline(\
char * 
restrict 
ins, char 
* 
restrict 
outs, 
size_t 
fcol,
 size_t 
tw); // 
style Q, 
how to 
indent 
this best?
size_t 
fillbuf(c\
har s[], 
size_t 
sz);

int 
main(void)
{
	char 
line[LINE\
BUF];	
	// 
input 
buffer
	size_\
t len;	
		
	// 
input 
buffer 
string 
length

	size_\
t	fcol 
= 10;	
	// 
column to 
fold at
	size_\
t	tw = 
4;		
	// 
tab width

	if 
(fcol > 
MAXFC) {
		r\
eturn -1;
	}

	if 
(tw > 
MAXTW) {
		r\
eturn -2;
	}

	len = 
getline(l\
ine, 
LINEBUF);
	while 
(len > 0) 
{
		c\
har 
xline[LIN\
EBUF];	
// folded 
part
		s\
ize_t 
xlen;	
		/\
/ folded 
part 
string 
length

		/\
/ fold 
the line 
(or part 
of one)
		x\
len = 
foldline(\
line, 
xline, 
fcol, tw);
		p\
rintf("%s\
", line);

		/\
/ did we 
fold?
		i\
f (xlen > 
0) {
		
	// we 
printed 
only the 
first 
part, and 
must run 
the 2nd 
part 
through
		
	// 
the loop 
as well
		
	copy(\
line, 
xline);
		
	if 
(line[xle\
n-1] == 
'\n') {
		
		l\
en = xlen;
		
	}
		
	else {
		
		/\
/ if 
there's 
no '\n' 
at the 
end, 
there's 
more of 
the line 
and
		
		/\
/ we must 
fill the 
buffer to 
be able 
to 
process 
it 
properly
		
		l\
en = 
fillbuf(l\
ine, 
LINEBUF);
		
	}
		}
		e\
lse {
		
	len = 
getline(l\
ine, 
LINEBUF);
		}
	}
	retur\
n 0;
}

/* Folds 
a line at 
the given 
column. 
The input 
string 
gets 
truncated 
to have
 * `fcol` 
chars + 
'\n', and 
the 
excess 
goes into 
output 
string.
 * 
Non-destr\
uctive 
(doesn't 
delete 
whitespac\
e) and 
adds a 
'\' char 
before the
 * '\n' 
if it has 
to break 
a word. 
Can be 
reversed 
by 
deleting
 * "(?<=\ 
)\n|(?<=\\
t)\n|\\\n\
" regex 
pattern 
matches 
unless 
the 
original 
file had
 * 
matches 
as well.
 */
size_t 
foldline(\
char * 
restrict 
ins, char 
* 
restrict 
outs, 
size_t 
fcol,
 size_t 
tw)
{
	/* 
Find i & 
col such 
that they 
will mark 
either 
the 
position 
of 
terminati\
on
	 * 
(\0 or 
\n) or 
whatever 
the char 
in the 
overflow 
column.
	 * 
Find lnbi 
such that 
it will 
mark the 
last 
non-blank 
char 
before the
	 * 
folding 
column.
	 */
	size_\
t i;
	size_\
t lnbi;
	size_\
t col;
	char 
lc = ' ';
	for 
(col = 0, 
i = 0, 
lnbi = 0; 
ins[i] != 
'\0' && 
ins[i] != 
'\n' &&
	 col 
< fcol; 
++i) {
		i\
f (ins[i] 
== ' ') {
		
	++col;
		
	if 
(lc != ' 
' && lc 
!= '\t') {
		
		l\
nbi = i-1;
		
	}
		}
		e\
lse if 
(ins[i] 
== '\t') {
		
	col = 
(col + 
tw) / tw 
* tw;
		
	if 
(lc != ' 
' && lc 
!= '\t') {
		
		l\
nbi = i-1;
		
	}
		}
		e\
lse {
		
	++col;
		}
		l\
c = 
ins[i];
	}

	// 
Determine 
where to 
fold at
	size_\
t foldat;
	if 
(col < 
fcol) {
		/\
/ don't 
fold, 
terminate\
d before 
the fold 
column
		o\
uts[0] = 
'\0';
		r\
eturn 0;
	}
	else 
if (col 
== fcol) {
		/\
/ maybe 
fold, we 
have 
something 
in the 
overflow
		i\
f (ins[i] 
== '\n' 
|| ins[i] 
== '\0') {
		
	// 
don't 
fold, 
terminati\
on can 
stay in 
the 
overflow
		
	outs[\
0] = '\0';
		
	retur\
n 0;
		}
		e\
lse if 
(lnbi > 0 
|| 
(ins[0] 
!= ' ' && 
ins[0] != 
'\t' && 
(ins[1] 
== ' '
		 \
|| ins[1] 
== 
'\t'))) {
		
	// 
fold 
after the 
whitespac\
e 
following 
the last 
non-blank 
char
		
	folda\
t = 
lnbi+2;
		}
		e\
lse {
		
	// 
fold at 
overflow
		
	folda\
t = i;
		}
	}
	else {
		/\
/ col > 
fcol only 
possible 
if 
ins[i-1] 
== '\t' 
so we 
fold and 
place the
		/\
/ tab on 
the next 
line
		f\
oldat = 
i-1;
	}

	// 
Fold
	size_\
t j = 0, 
k;
	// 
add a 
marker if 
we're 
folding 
after a 
non-blank 
char
	if 
(ins[fold\
at-1] != 
' ' && 
ins[folda\
t-1] != 
'\t') {
		o\
uts[j++] 
= 
ins[folda\
t-1];
		i\
ns[foldat\
-1] = 
'\\';
	}
	for 
(k = 
foldat; 
ins[k] != 
'\0'; 
++j, ++k) 
{
		o\
uts[j] = 
ins[k];
	}
	outs[\
j] = '\0';
	ins[f\
oldat++] 
= '\n';
	ins[f\
oldat] = 
'\0';
	retur\
n j;
}

/* 
continue 
reading a 
line into 
`s`, 
return 
total 
string 
length;
 * the 
buffer 
must have 
free 
space for 
at least 
1 more 
char
 */
size_t 
fillbuf(c\
har s[], 
size_t sz)
{
	// 
find end 
of string
	size_\
t i;
	for 
(i = 0; 
s[i] != 
'\0'; 
++i) {
	}

	// 
not 
introduce\
d in the 
book, but 
we could 
achieve 
the same 
by c&p
	// 
getline 
code here
	retur\
n i + 
getline(&\
s[i], 
sz-i);
}

/* 
getline: 
read a 
line into 
`s`, 
return 
string 
length;
 * `sz` 
must be 
>1 to 
accomodat\
e at 
least one 
character 
and string
 * 
terminati\
on '\0'
 */
size_t 
getline(c\
har s[], 
size_t sz)
{
	int c;
	size_\
t i = 0;
	bool 
el = 
false;
	while 
(i + 1 < 
sz && 
!el) {
		c 
= 
getchar();
		i\
f (c == 
EOF) {
		
	el = 
true; // 
note: 
`break` 
not 
introduce\
d yet
		}
		e\
lse {
		
	s[i] 
= (char) 
c;
		
	++i;
		
	if (c 
== '\n') {
		
		e\
l = true;
		
	}
		}
	}
	if (i 
< sz) {
		i\
f (c == 
EOF && 
!feof(std\
in)) { // 
EOF due 
to read 
error
		
	i = 0;
		}
		s\
[i] = 
'\0';
	}
	retur\
n i;
}

/* copy: 
copy a 
'\0' 
terminate\
d string 
`from` 
into `to`;
 * assume 
`to` is 
big 
enough;
 */
void 
copy(char 
* 
restrict 
to, char 
const * 
restrict 
from)
{
	size_\
t i;
	for 
(i = 0; 
from[i] 
!= '\0'; 
++i) {
		t\
o[i] = 
from[i];
	}
	to[i] 
= '\0';
}
